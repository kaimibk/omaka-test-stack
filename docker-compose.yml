version: "3.7"
services:
    notebook-server:
        build: 
            context: .
            dockerfile: Dockerfile
        env_file:
            - .env
        volumes: 
            - ./data:/app/data
            - ./notebooks:/app/notebooks
            - ./logs:/app/logs
            - ./requirements:/app/requirements
            - ./scripts:/app/scripts
        ports:
            - "${JUPYTERPORT}:${JUPYTERPORT}"
        networks:
            omaka-server: null

    ray-head:
        image: rayproject/ray:latest-py310
        env_file:
            - .env
        ports:
            - "${REDISPORT}:${REDISPORT}"
            - "${DASHBOARDPORT}:${DASHBOARDPORT}"
            - "${HEADNODEPORT}:${HEADNODEPORT}"
        command: bash -c "ray start --head --dashboard-port=${DASHBOARDPORT} --port=${REDISPORT} --dashboard-host=0.0.0.0 --redis-password=${REDISPASSWORD} --metrics-export-port=${METRICSPORT} --block"
        shm_size: 2g
        deploy:
            resources:
                limits:
                    cpus: "1"
                    memory: "2g"
        networks:
            omaka-server: null
                    
    ray-worker:
        image: rayproject/ray:latest-py310
        depends_on:
            - ray-head
        env_file:
            - .env
        command: bash -c "ray start --address=ray-head:${REDISPORT} --redis-password=${REDISPASSWORD} --num-cpus=${NUM_CPU_WORKER} --block"
        shm_size: 2g
        deploy:
            mode: replicated
            replicas: ${NUM_WORKERS}
            resources:
                limits:
                    cpus: ${NUM_CPU_WORKER}
                    memory: "2g"
        networks:
            omaka-server: null

    prometheus:
        image: prom/prometheus:latest
        depends_on:
            - 'ray-head'
        volumes:
            - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
        ports:
            - "${PROMETHEUSPORT}:${PROMETHEUSPORT}"
        networks:
            omaka-server: null

    grafana:
        image: grafana/grafana:latest
        depends_on:
            - 'prometheus'
        links:
            - prometheus:promtheus
            - ray-head:ray-head
        environment:
            - GF_AUTH_DISABLE_LOGIN_FORM=true
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        ports:
            - "${GRAFANAPORT}:${GRAFANAPORT}"
        volumes:
            - ./grafana/grafana_data:/var/lib/grafana
        user: "1000"
        networks:
            omaka-server: null
    
    postgres:
        image: postgres
        volumes:
            - ./postgres/data:/var/lib/postgresql/data
            - type: bind
              source:  ./postgres/init1.sql
              target: /docker-entrypoint-initdb.d/init1.sql
              read_only: true
            - type: bind
              source:  ./postgres/init2.sql
              target: /docker-entrypoint-initdb.d/init2.sql
              read_only: true
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - TZ="US/Hawaii"
        ports:
            - ${POSTGRESPORT}:${POSTGRESPORT}
        command:
            - "postgres"
            - "-c"
            - "max_connections=150"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
            interval: 20s
            timeout: 5s
            retries: 10
        logging:
            driver: json-file
            options:
                max-file: '1'
                max-size: 3m
        restart: always
        networks:
            omaka-server: null       

    minio:
        image: minio/minio
        ports:
            - "${MINIOPORT}:${MINIOPORT}"
        restart: always
        volumes:
            - ./minio/data:/data
        environment:
            - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
            - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
        command: server /data
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:${MINIOPORT}/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3
        logging:
            driver: json-file
            options:
                max-file: '1'
                max-size: 3m
        networks:
            omaka-server: null

    mc:
        image: minio/mc
        depends_on:
            - minio
        env_file:
            - .env
        entrypoint: >
            /bin/sh -c "
            until (/usr/bin/mc config host add myminio ${MINIO_URL} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}) do echo 'try to create buckets...' && sleep 1; done;
            /usr/bin/mc mb myminio/default;
            /usr/bin/mc policy download myminio/default;
            until (/usr/bin/mc config host add myminio ${MINIO_URL} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}) do echo 'try to create buckets...' && sleep 1; done;
            /usr/bin/mc mb myminio/prefect;
            /usr/bin/mc policy download myminio/prefect;
            exit 0;
            "
        logging:
            driver: json-file
            options:
                max-file: '1'
                max-size: 3m
        networks:
            omaka-server: null
    
    mlflow-server:
        build:
            context: ./mlflow
            dockerfile: Dockerfile
        volumes:
            - ./mlflow/data:/home/work
        depends_on:
            - mc
            - postgres
        ports:
            - "${MLFLOWPORT}:${MLFLOWPORT}"
        environment:
            - MLFLOW_S3_ENDPOINT_URL=${MINIO_URL}
            - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
            - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
        # command: mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} --default-artifact-root s3://mlflow/ --host 0.0.0.0
        command: bash -c "mlflow server --backend-store-uri ${DB_URL} --default-artifact-root ${ARTIFACT_PATH} --host 0.0.0.0 --port ${MLFLOWPORT}"
        restart: always
        networks:
            omaka-server: null

networks:
    omaka-server:
        name: omaka-server